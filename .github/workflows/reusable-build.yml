name: Build Image

on:
  workflow_call:
    inputs:
      image-registry:
        description: "The registry to push the image to.  E.G. ghcr.io/ublue-os"
        required: true
        type: string
      image-name:
        description: "The name of the image to build.  E.G. main"
        required: true
        type: string
      platforms:
        description: "The platforms to build for.  E.G. aarch64, x86_64 etc"
        required: true
        type: string
      tags:
        description: "The tags to apply to the image"
        required: true
        type: string
      build-args:
        description: "The build arguments to pass to the build"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}-${{ inputs.fedora_edition }}-${{ inputs.platforms }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        env:
          PLATFORMS: ${{ inputs.platforms }}
        run: |
          MATRIX='{"include":[]}'
          # Split platforms string by comma and iterate over each platform
          for platform in $(echo $PLATFORMS | tr ',' '\n'); do
            MATRIX=$(echo $MATRIX | jq ".include += [{\"platform\": \"${platform}\"}]")
          done

          echo "matrix=$(echo $MATRIX | jq -c  '.')" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-24.04
    needs: generate_matrix
    strategy:
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Image
        id: build-image
        env:
          IMAGE_REGISTRY: ${{ inputs.image-registry }}
          IMAGE_NAME: ${{ inputs.image-name }}
          BUILD_ARGS: ${{ inputs.build-args }}
        run: |
          BUILD_ARGS_FLAGS=()
          for arg in $(echo $BUILD_ARGS | tr ',' '\n'); do
            BUILD_ARGS_FLAGS+=("--build-arg" "$arg")
          done

          podman build \
            --iidfile /tmp/iidfile \
            -t ${IMAGE_REGISTRY}/${IMAGE_NAME}:local \
            "${BUILD_ARGS_FLAGS[@]}" \
            .

          IMAGE_ID=$(cat /tmp/iidfile)
          IMAGE_DIGEST=$(podman inspect --format '{{.Digest}}' $IMAGE_ID)

          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT

      - name: Push Image
        id: push-image
        env:
          IMAGE_REGISTRY: ${{ inputs.image-registry }}
          IMAGE_NAME: ${{ inputs.image-name }}
          IMAGE_DIGEST: ${{ steps.build-image.outputs.IMAGE_DIGEST }}
        run: |
          for i in {1..3}; do
            echo "podman push --digestfile=/tmp/digestfile ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}" && break || sleep $((10 ** i))
            # Temporarily populate the digest file with a dummy value
            echo "dummy-digest ${{ matrix.platform }}" > /tmp/digestfile
          done

          IMAGE_DIGEST=$(cat /tmp/digestfile)
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT

      - name: Generate Outputs
        env:
          IMAGE_NAME: ${{ inputs.image-name }}
          IMAGE_DIGEST: ${{ steps.push-image.outputs.IMAGE_DIGEST }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          mkdir -p /tmp/outputs/digests
          echo "$IMAGE_DIGEST" > /tmp/outputs/digests/${IMAGE_NAME}-${PLATFORM}.txt

      - name: Upload Output Artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: ${{ steps.build-image.outputs.IMAGE_NAME }}-${{ inputs.source_tag }}-${{ matrix.platform }}
          retention-days: 1
          if-no-files-found: error
          path: |
            /tmp/outputs/digests/*.txt

  manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Fetch Build Outputs
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: "*.txt"
          merge-multiple: true
          path: /tmp/artifacts

      - name: Load Outputs
        id: load-outputs
        run: |
          # Initialize an empty JSON object using jq
          DIGESTS_JSON=$(jq -n '{}')

          # Loop through digest files and construct the JSON
          for digest_file in /tmp/artifacts/*.txt; do
            # Extract the platform from the file name
            PLATFORM=$(basename $digest_file | rev | cut -d'-' -f1 | rev | cut -d'.' -f1)
            DIGEST=$(cat $digest_file)

            # Add the platform and digest to the JSON object
            DIGESTS_JSON=$(echo "$DIGESTS_JSON" | jq --arg key "$PLATFORM" --arg value "$DIGEST" '. + {($key): $value}')
          done

          echo "DIGESTS_JSON: $DIGESTS_JSON"
          DIGESTS_JSON=$(echo "$DIGESTS_JSON" | jq -c '.')
          echo "DIGESTS_JSON=$DIGESTS_JSON" >> $GITHUB_OUTPUT

      - name: Create Manifest
        id: create-manifest
        env:
          IMAGE_REGISTRY: ${{ inputs.image-registry }}
          IMAGE_NAME: ${{ inputs.image-name }}
        run: |
          podman manifest create ${IMAGE_REGISTRY}/${IMAGE_NAME}
          echo "MANIFEST=${IMAGE_REGISTRY}/${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Populate Manifest
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          PLATFORMS: ${{ inputs.platforms }}
          DIGESTS_JSON: ${{ steps.load-outputs.outputs.DIGESTS_JSON }}
        run: |
          DIGESTS=$(echo "$DIGESTS_JSON" | jq -c '.')
          for platform in $(echo $PLATFORMS | tr ',' '\n'); do
            echo "Adding platform: $platform"
            # Get the digest for the platform
            DIGEST=$(echo "$DIGESTS" | jq -r ".$platform")

            podman manifest add $MANIFEST \
              --arch $platform \
              $IMAGE_REGISTRY@$DIGEST
          done

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push manifest
        env:
          TAGS: ${{ inputs.tags }}
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          IMAGE_REGISTRY: ${{ inputs.image-registry }}
        run: |
          for tag in $(echo $TAGS | tr ',' '\n'); do
            echo "podman manifest push --all=false $MANIFEST $IMAGE_REGISTRY/$tag"
          done
